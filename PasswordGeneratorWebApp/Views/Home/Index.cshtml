@{
    ViewData["Title"] = "Password Generator";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
          background-color: #f8f9fa;
        }

        .password-box {
          font-size: 1.2rem;
          font-family: monospace;
          padding: 10px;
          background-color: #e9ecef;
          border-radius: 5px;
          word-break: break-word;
        }

        .toast-container {
          position: fixed;
          bottom: 1rem;
          right: 1rem;
          z-index: 1055;
        }

        .strength-bar {
          height: 8px;
          border-radius: 4px;
          transition: width 0.3s ease;
        }

        .progress {
          background-color: #dee2e6;
          border: 1px solid #ced4da;
          border-radius: 4px;
        }

        input[type="range"] {
          -webkit-appearance: none;
          width: 100%;
          height: 8px;
          background: #dee2e6;
          border-radius: 4px;
          outline: none;
          transition: background 0.3s;
        }

        input[type="range"]::-webkit-slider-thumb {
          -webkit-appearance: none;
          appearance: none;
          width: 18px;
          height: 18px;
          background: #0d6efd;
          border-radius: 50%;
          cursor: pointer;
          box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);
        }

        input[type="range"]::-moz-range-thumb {
          width: 18px;
          height: 18px;
          background: #0d6efd;
          border: none;
          border-radius: 50%;
          cursor: pointer;
        }

        input[type="range"]::-webkit-slider-runnable-track {
          background: #dee2e6;
          height: 8px;
          border-radius: 4px;
        }

        input[type="range"]:focus::-webkit-slider-runnable-track {
          background: #bcd0f7;
        }
    </style>
</head>
<body>
  <div class="container mt-5">
    <h2 class="text-center mb-4">üîê Password Generator</h2>
    <div class="row justify-content-center">
      <div class="col-md-6">

        <!-- Password Display -->
        <div class="mb-3">
          <label class="form-label">Generated Password</label>
          <div class="input-group">
            <input type="text" id="passwordOutput" class="form-control password-box" readonly>
            <button class="btn btn-outline-secondary" onclick="copyPassword()">Copy</button>
          </div>
          <div id="errorMessage" class="text-danger mt-2" style="display:none;"></div>
        </div>

        <!-- Strength Indicator -->
        <div class="mb-3">
          <label class="form-label">Strength</label>
          <div class="progress">
            <div id="strengthBar" class="progress-bar strength-bar" role="progressbar"></div>
          </div>
        </div>

        <!-- Options -->
        <div class="mb-3">
          <label class="form-label">Length: <span id="lengthValue">12</span></label>
          <input type="range" min="8" max="32" value="12" class="form-range" id="lengthRange" onchange="updateLength()">
        </div>

        <div class="form-check mb-2">
          <input class="form-check-input" type="checkbox" id="uppercase" checked>
          <label class="form-check-label" for="uppercase">Include Uppercase Letters</label>
        </div>
        <div class="form-check mb-2">
          <input class="form-check-input" type="checkbox" id="lowercase" checked>
          <label class="form-check-label" for="lowercase">Include Lowercase Letters</label>
        </div>
        <div class="form-check mb-2">
          <input class="form-check-input" type="checkbox" id="numbers" checked>
          <label class="form-check-label" for="numbers">Include Numbers</label>
        </div>
        <div class="form-check mb-4">
          <input class="form-check-input" type="checkbox" id="symbols">
          <label class="form-check-label" for="symbols">Include Symbols</label>
        </div>

        <!-- Generate Button -->
        <button class="btn btn-primary w-100" onclick="generatePassword()">Generate Password</button>
      </div>
    </div>
  </div>

  <!-- Toast Message -->
  <div class="toast-container">
    <div id="copyToast" class="toast align-items-center text-bg-success" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="d-flex">
        <div class="toast-body">
          Password copied to clipboard!
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Update length label
    function updateLength() {
      document.getElementById('lengthValue').textContent = document.getElementById('lengthRange').value;
    }

    // Copy password to clipboard and show toast
    function copyPassword() {
      const password = document.getElementById('passwordOutput').value;
      if (password) {
        navigator.clipboard.writeText(password);
        const toast = new bootstrap.Toast(document.getElementById('copyToast'));
        toast.show();
      }
    }

    // Evaluate password strength (simple estimation)
    function evaluateStrength(password) {
      let score = 0;
      if (password.length >= 8) score++;
      if (/[A-Z]/.test(password)) score++;
      if (/[a-z]/.test(password)) score++;
      if (/[0-9]/.test(password)) score++;
      if (/[^A-Za-z0-9]/.test(password)) score++;
      return score;
    }

    // Update strength bar UI
    function updateStrengthBar(password) {
      const bar = document.getElementById('strengthBar');
      const score = evaluateStrength(password);
      const widths = ['0%', '20%', '40%', '60%', '80%', '100%'];
      const colors = ['#dee2e6', '#dc3545', '#fd7e14', '#ffc107', '#198754', '#0d6efd'];
      bar.style.width = widths[score];
      bar.style.backgroundColor = colors[score];
      bar.setAttribute('aria-valuenow', score * 20);
      bar.setAttribute('aria-valuemax', 100);
    }

    // Generate password using backend
    function generatePassword() {
      const length = document.getElementById('lengthRange').value;
      const uppercase = document.getElementById('uppercase').checked;
      const lowercase = document.getElementById('lowercase').checked;
      const numbers = document.getElementById('numbers').checked;
      const symbols = document.getElementById('symbols').checked;

      fetch(`/Password/GeneratePassword?length=${length}&useUppercase=${uppercase}&useLowercase=${lowercase}&useNumbers=${numbers}&useSymbols=${symbols}`)
        .then(response => response.json())
        .then(data => {
          const errorDiv = document.getElementById('errorMessage');
          if (data.error && data.error.length > 0) {
            errorDiv.textContent = data.error;
            errorDiv.style.display = 'block';
            document.getElementById('passwordOutput').value = '';
            updateStrengthBar('');
          } else {
            errorDiv.textContent = '';
            errorDiv.style.display = 'none';
            document.getElementById('passwordOutput').value = data.password;
            updateStrengthBar(data.password);
          }
        });
    }

    // Initialize UI
    document.addEventListener('DOMContentLoaded', function () {
      updateLength();
      generatePassword();
    });
  </script>
</body>
</html>
